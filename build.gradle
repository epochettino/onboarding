buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.3.3.RELEASE")
        classpath('io.spring.gradle:dependency-management-plugin:0.5.1.RELEASE')
        classpath('com.moowork.gradle:gradle-grunt-plugin:0.11')
    }
}

apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'application'
apply plugin: 'spring-boot'
apply plugin: 'com.moowork.grunt'

version='0.1.0'
mainClassName='com.globant.onboarding.Application'

/** Used for debug **/
applicationDefaultJvmArgs = ["-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005" ]

jar.manifest{
    attributes 'Implementation-Title':'OnboardingTool',
            'Implementation-Version':version,
            'Main-Class':mainClassName
}

jar {
    baseName = 'gs-spring-boot'
    version = "${version}"
}

bootRun {
    addResources = true
}

repositories {
    mavenCentral()
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    
    compile 'org.codehaus.groovy:groovy-all:2.4.4'
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile("org.springframework.boot:spring-boot-starter-security")
    compile("org.springframework.boot:spring-boot-starter-thymeleaf")
    compile("org.springframework.boot:spring-boot-devtools")

    testCompile "org.spockframework:spock-core:1.0-groovy-2.4"
    testCompile "info.cukes:cucumber-jvm:1.2.4"
    testCompile "info.cukes:cucumber-core:1.2.4"
    testCompile 'info.cukes:cucumber-junit:1.2.4'
    testCompile 'info.cukes:cucumber-groovy:1.2.4'
    testCompile "info.cukes:cucumber-spring:1.2.4"
    testCompile 'info.cukes:cucumber-java8:1.2.4'
    testCompile("org.springframework.boot:spring-boot-starter-test")
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}

test.testLogging.exceptionFormat = 'full'

configurations {
    functTestCompile.extendsFrom testCompile
    functTestRuntime.extendsFrom testRuntime
}

sourceSets {
    functionalTest {
        groovy.srcDir file('src/functional/groovy')
        resources.srcDir     file('src/functional/resources')
        compileClasspath = sourceSets.main.output + sourceSets.test.output + configurations.functTestCompile
        runtimeClasspath = output + compileClasspath + configurations.functTestRuntime
    }
}

task functionalTest(type: Test) {
    testClassesDir = sourceSets.functionalTest.output.classesDir
    classpath = sourceSets.functionalTest.runtimeClasspath
}

check.dependsOn functionalTest

node {
    // Version of node to use.
    version = '0.12.9'
    // Enabled the automatic download. False is the default (for now).
    download = true
    
    workDir = file("build/nodejs")
    nodeModulesDir = file('src/main/resources')

}

grunt {
    // Set the directory where Gruntfile.js should be found
    workDir = file('src/main/resources' )

    // Whether colors should output on the terminal
    colors = true

    // Whether output from Grunt should be buffered - useful when running tasks in parallel
    bufferOutput = false
}


grunt_build.dependsOn 'npmInstall'
processResources.dependsOn 'grunt_build'